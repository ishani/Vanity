// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Vanity
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\Dev\Github\Vanity\Thtaccess.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class Thtaccess : ThtaccessBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n<Files .htaccess>\r\norder allow,deny\r\ndeny from all\r\n</Files>\r\n\r\nErrorDocument 4" +
                    "04 /404.html\r\n\r\n\r\n# ------------------------------------------------------------" +
                    "------------------\r\nServerSignature Off\r\nRewriteEngine on\r\nOptions -Indexes\r\nOpt" +
                    "ions -ExecCGI\r\nRemoveHandler .cgi .php .php3 .php4 .php5 .phtml .pl .py .pyc .py" +
                    "o\r\n\r\n\r\n# -----------------------------------------------------------------------" +
                    "-------\r\n# 6G FIREWALL/BLACKLIST\r\n# @ https://perishablepress.com/6g/\r\n\r\n# 6G:[Q" +
                    "UERY STRINGS]\r\n<IfModule mod_rewrite.c>\r\n    RewriteEngine On\r\n    RewriteCond %" +
                    "{QUERY_STRING} (eval\\() [NC,OR]\r\n    RewriteCond %{QUERY_STRING} (127\\.0\\.0\\.1) " +
                    "[NC,OR]\r\n    RewriteCond %{QUERY_STRING} ([a-z0-9]{2000,}) [NC,OR]\r\n    RewriteC" +
                    "ond %{QUERY_STRING} (javascript:)(.*)(;) [NC,OR]\r\n    RewriteCond %{QUERY_STRING" +
                    "} (base64_encode)(.*)(\\() [NC,OR]\r\n    RewriteCond %{QUERY_STRING} (GLOBALS|REQU" +
                    "EST)(=|\\[|%) [NC,OR]\r\n    RewriteCond %{QUERY_STRING} (<|%3C)(.*)script(.*)(>|%3" +
                    ") [NC,OR]\r\n    RewriteCond %{QUERY_STRING} (\\\\|\\.\\.\\.|\\.\\./|~|`|<|>|\\|) [NC,OR]\r" +
                    "\n    RewriteCond %{QUERY_STRING} (boot\\.ini|etc/passwd|self/environ) [NC,OR]\r\n  " +
                    "  RewriteCond %{QUERY_STRING} (thumbs?(_editor|open)?|tim(thumb)?)\\.php [NC,OR]\r" +
                    "\n    RewriteCond %{QUERY_STRING} (\\\'|\\\")(.*)(drop|insert|md5|select|union) [NC]\r" +
                    "\n    RewriteRule .* - [F]\r\n</IfModule>\r\n\r\n# 6G:[REQUEST METHOD]\r\n<IfModule mod_r" +
                    "ewrite.c>\r\n    RewriteCond %{REQUEST_METHOD} ^(connect|debug|move|put|trace|trac" +
                    "k) [NC]\r\n    RewriteRule .* - [F]\r\n</IfModule>\r\n\r\n# 6G:[REQUEST STRINGS]\r\n<IfMod" +
                    "ule mod_alias.c>\r\n    RedirectMatch 403 (?i)([a-z0-9]{2000,})\r\n    RedirectMatch" +
                    " 403 (?i)(https?|ftp|php):/\r\n    RedirectMatch 403 (?i)(base64_encode)(.*)(\\()\r\n" +
                    "    RedirectMatch 403 (?i)(=\\\\\\\'|=\\\\%27|/\\\\\\\'/?)\\.\r\n    RedirectMatch 403 (?i)/(" +
                    "\\$(\\&)?|\\*|\\\"|\\.|,|&|&amp;?)/?$\r\n    RedirectMatch 403 (?i)(\\{0\\}|\\(/\\(|\\.\\.\\.|\\" +
                    "+\\+\\+|\\\\\\\"\\\\\\\")\r\n    RedirectMatch 403 (?i)(~|`|<|>|:|;|,|%|\\\\|\\{|\\}|\\[|\\]|\\|)\r\n" +
                    "    RedirectMatch 403 (?i)/(=|\\$&|_mm|cgi-|muieblack)\r\n    RedirectMatch 403 (?i" +
                    ")(&pws=0|_vti_|\\(null\\)|\\{\\$itemURL\\}|echo(.*)kae|etc/passwd|eval\\(|self/environ" +
                    ")\r\n    RedirectMatch 403 (?i)\\.(aspx?|bash|bak?|cfg|cgi|dll|exe|git|hg|ini|jsp|l" +
                    "og|mdb|out|sql|svn|swp|tar|rar|rdf)$\r\n    RedirectMatch 403 (?i)/(^$|(wp-)?confi" +
                    "g|mobiquo|phpinfo|shell|sqlpatch|thumb|thumb_editor|thumbopen|timthumb|webshell)" +
                    "\\.php\r\n</IfModule>\r\n\r\n# 6G:[USER AGENTS]\r\n<IfModule mod_setenvif.c>\r\n    SetEnvI" +
                    "fNoCase User-Agent ([a-z0-9]{2000,}) bad_bot\r\n    SetEnvIfNoCase User-Agent (arc" +
                    "hive.org|binlar|casper|checkpriv|choppy|clshttp|cmsworld|diavol|dotbot|extract|f" +
                    "eedfinder|flicky|g00g1e|harvest|heritrix|httrack|kmccrew|loader|miner|nikto|nutc" +
                    "h|planetwork|postrank|purebot|pycurl|python|seekerspider|siclab|skygrid|sqlmap|s" +
                    "ucker|turnit|vikspider|winhttp|xxxyy|youda|zmeu|zune) bad_bot\r\n    \r\n    # Apach" +
                    "e < 2.3\r\n    <IfModule !mod_authz_core.c>\r\n        Order Allow,Deny\r\n        All" +
                    "ow from all\r\n        Deny from env=bad_bot\r\n    </IfModule>\r\n\r\n    # Apache >= 2" +
                    ".3\r\n    <IfModule mod_authz_core.c>\r\n        <RequireAll>\r\n            Require a" +
                    "ll Granted\r\n            Require not env bad_bot\r\n        </RequireAll>\r\n    </If" +
                    "Module>\r\n</IfModule>\r\n\r\n\r\n# ----------------------------------------------------" +
                    "--------------------------\r\n# | UTF-8 encoding                                  " +
                    "                           |\r\n# ------------------------------------------------" +
                    "------------------------------\r\n\r\n# Use UTF-8 encoding for anything served as `t" +
                    "ext/html` or `text/plain`.\r\nAddDefaultCharset utf-8\r\n\r\n# Force UTF-8 for certain" +
                    " file formats.\r\n<IfModule mod_mime.c>\r\n    AddCharset utf-8 .atom .css .js .json" +
                    " .jsonld .rss .vtt .webapp .xml\r\n</IfModule>\r\n\r\n\r\n# ----------------------------" +
                    "--------------------------------------------------\r\n# | Compression             " +
                    "                                                   |\r\n# ------------------------" +
                    "------------------------------------------------------\r\n\r\n\r\n # HTML, TXT, CSS, J" +
                    "avaScript, JSON, XML, HTC:\r\n<IfModule version.c>\r\n  <IfModule filter_module.c>\r\n" +
                    "    <IfVersion >= 2.4>\r\n      FilterDeclare   COMPRESS\r\n      FilterProvider  CO" +
                    "MPRESS  DEFLATE \"%{CONTENT_TYPE} = \'text/html\'\"\r\n      FilterProvider  COMPRESS " +
                    " DEFLATE \"%{CONTENT_TYPE} = \'text/css\'\"\r\n      FilterProvider  COMPRESS  DEFLATE" +
                    " \"%{CONTENT_TYPE} = \'text/plain\'\"\r\n      FilterProvider  COMPRESS  DEFLATE \"%{CO" +
                    "NTENT_TYPE} = \'text/xml\'\"\r\n      FilterProvider  COMPRESS  DEFLATE \"%{CONTENT_TY" +
                    "PE} = \'text/x-component\'\"\r\n      FilterProvider  COMPRESS  DEFLATE \"%{CONTENT_TY" +
                    "PE} = \'application/javascript\'\"\r\n      FilterProvider  COMPRESS  DEFLATE \"%{CONT" +
                    "ENT_TYPE} = \'application/json\'\"\r\n      FilterProvider  COMPRESS  DEFLATE \"%{CONT" +
                    "ENT_TYPE} = \'application/xml\'\"\r\n      FilterProvider  COMPRESS  DEFLATE \"%{CONTE" +
                    "NT_TYPE} = \'application/xhtml+xml\'\"\r\n      FilterProvider  COMPRESS  DEFLATE \"%{" +
                    "CONTENT_TYPE} = \'application/rss+xml\'\"\r\n      FilterProvider  COMPRESS  DEFLATE " +
                    "\"%{CONTENT_TYPE} = \'application/atom+xml\'\"\r\n      FilterProvider  COMPRESS  DEFL" +
                    "ATE \"%{CONTENT_TYPE} = \'application/vnd.ms-fontobject\'\"\r\n      FilterProvider  C" +
                    "OMPRESS  DEFLATE \"%{CONTENT_TYPE} = \'image/svg+xml\'\"\r\n      FilterProvider  COMP" +
                    "RESS  DEFLATE \"%{CONTENT_TYPE} = \'image/x-icon\'\"\r\n      FilterProvider  COMPRESS" +
                    "  DEFLATE \"%{CONTENT_TYPE} = \'application/x-font-ttf\'\"\r\n      FilterProvider  CO" +
                    "MPRESS  DEFLATE \"%{CONTENT_TYPE} = \'font/opentype\'\"\r\n      FilterChain     COMPR" +
                    "ESS\r\n      FilterProtocol  COMPRESS  DEFLATE change=yes;byteranges=no\r\n    </IfV" +
                    "ersion>\r\n    <IfVersion <= 2.2>\r\n      FilterDeclare   COMPRESS\r\n      FilterPro" +
                    "vider  COMPRESS  DEFLATE resp=Content-Type $text/html\r\n      FilterProvider  COM" +
                    "PRESS  DEFLATE resp=Content-Type $text/css\r\n      FilterProvider  COMPRESS  DEFL" +
                    "ATE resp=Content-Type $text/plain\r\n      FilterProvider  COMPRESS  DEFLATE resp=" +
                    "Content-Type $text/xml\r\n      FilterProvider  COMPRESS  DEFLATE resp=Content-Typ" +
                    "e $text/x-component\r\n      FilterProvider  COMPRESS  DEFLATE resp=Content-Type $" +
                    "application/javascript\r\n      FilterProvider  COMPRESS  DEFLATE resp=Content-Typ" +
                    "e $application/json\r\n      FilterProvider  COMPRESS  DEFLATE resp=Content-Type $" +
                    "application/xml\r\n      FilterProvider  COMPRESS  DEFLATE resp=Content-Type $appl" +
                    "ication/xhtml+xml\r\n      FilterProvider  COMPRESS  DEFLATE resp=Content-Type $ap" +
                    "plication/rss+xml\r\n      FilterProvider  COMPRESS  DEFLATE resp=Content-Type $ap" +
                    "plication/atom+xml\r\n      FilterProvider  COMPRESS  DEFLATE resp=Content-Type $a" +
                    "pplication/vnd.ms-fontobject\r\n      FilterProvider  COMPRESS  DEFLATE resp=Conte" +
                    "nt-Type $image/svg+xml\r\n      FilterProvider  COMPRESS  DEFLATE resp=Content-Typ" +
                    "e $image/x-icon\r\n      FilterProvider  COMPRESS  DEFLATE resp=Content-Type $appl" +
                    "ication/x-font-ttf\r\n      FilterProvider  COMPRESS  DEFLATE resp=Content-Type $f" +
                    "ont/opentype\r\n      FilterChain     COMPRESS\r\n      FilterProtocol  COMPRESS  DE" +
                    "FLATE change=yes;byteranges=no\r\n    </IfVersion>\r\n  </IfModule>\r\n</IfModule>\r\n\r\n" +
                    "\r\n# ----------------------------------------------------------------------------" +
                    "--\r\n# | ETags                                                                   " +
                    "   |\r\n# ------------------------------------------------------------------------" +
                    "------\r\n\r\n# Remove `ETags` as resources are sent with far-future expires headers" +
                    ".\r\n# http://developer.yahoo.com/performance/rules.html#etags.\r\n\r\n# `FileETag Non" +
                    "e` doesn\'t work in all cases.\r\n<IfModule mod_headers.c>\r\n    Header unset ETag\r\n" +
                    "\r\n  <FilesMatch \".(js|css|xml|gz|html)$\">\r\n    Header append Vary: Accept-Encodi" +
                    "ng\r\n  </FilesMatch>\r\n\r\n</IfModule>\r\n\r\nFileETag None\r\n\r\n# -----------------------" +
                    "-------------------------------------------------------\r\n# | Expires headers    " +
                    "                                                        |\r\n# -------------------" +
                    "-----------------------------------------------------------\r\n\r\n# The following e" +
                    "xpires headers are set pretty far in the future. If you\r\n# don\'t control version" +
                    "ing with filename-based cache busting, consider\r\n# lowering the cache time for r" +
                    "esources such as style sheets and JavaScript\r\n# files to something like one week" +
                    ".\r\n\r\n<IfModule mod_expires.c>\r\n\r\n    ExpiresActive on\r\n    ExpiresDefault       " +
                    "                               \"access plus 1 month\"\r\n\r\n  # CSS\r\n    ExpiresByTy" +
                    "pe text/css                              \"access plus 1 year\"\r\n\r\n  # Data interc" +
                    "hange\r\n    ExpiresByType application/json                      \"access plus 0 se" +
                    "conds\"\r\n    ExpiresByType application/ld+json                   \"access plus 0 s" +
                    "econds\"\r\n    ExpiresByType application/xml                       \"access plus 0 " +
                    "seconds\"\r\n    ExpiresByType text/xml                              \"access plus 0" +
                    " seconds\"\r\n\r\n  # Favicon (cannot be renamed!) and cursor images\r\n    ExpiresByTy" +
                    "pe image/x-icon                          \"access plus 1 year\"\r\n\r\n  # HTML compon" +
                    "ents (HTCs)\r\n    ExpiresByType text/x-component                      \"access plu" +
                    "s 1 month\"\r\n\r\n  # HTML\r\n    ExpiresByType text/html                             " +
                    "\"access plus 0 seconds\"\r\n\r\n  # JavaScript\r\n    ExpiresByType application/javascr" +
                    "ipt                \"access plus 1 year\"\r\n\r\n  # Manifest files\r\n    ExpiresByType" +
                    " application/x-web-app-manifest+json   \"access plus 0 seconds\"\r\n    ExpiresByTyp" +
                    "e text/cache-manifest                   \"access plus 0 seconds\"\r\n\r\n  # Media\r\n  " +
                    "  ExpiresByType audio/ogg                             \"access plus 1 month\"\r\n   " +
                    " ExpiresByType image/gif                             \"access plus 1 month\"\r\n    " +
                    "ExpiresByType image/jpeg                            \"access plus 1 month\"\r\n    E" +
                    "xpiresByType image/png                             \"access plus 1 month\"\r\n    Ex" +
                    "piresByType video/mp4                             \"access plus 1 month\"\r\n    Exp" +
                    "iresByType video/ogg                             \"access plus 1 month\"\r\n    Expi" +
                    "resByType video/webm                            \"access plus 1 month\"\r\n\r\n  # Web" +
                    " feeds\r\n    ExpiresByType application/atom+xml                  \"access plus 1 h" +
                    "our\"\r\n    ExpiresByType application/rss+xml                   \"access plus 1 hou" +
                    "r\"\r\n\r\n  # Web fonts\r\n    ExpiresByType application/font-woff                 \"ac" +
                    "cess plus 1 month\"\r\n    ExpiresByType application/vnd.ms-fontobject         \"acc" +
                    "ess plus 1 month\"\r\n    ExpiresByType application/x-font-ttf                \"acce" +
                    "ss plus 1 month\"\r\n    ExpiresByType font/opentype                         \"acces" +
                    "s plus 1 month\"\r\n    ExpiresByType image/svg+xml                         \"access" +
                    " plus 1 month\"\r\n\r\n</IfModule>\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class ThtaccessBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
